{"version":3,"sources":["WordTank.js"],"names":["__isStringArr","strArr","Array","isArray","forEach","val","WordTank","constructor","wordArray","index","indexWord","TypeError","getWordCount","word","count","Error","toString","clearWord"],"mappings":";;;;;AAAA;;;;;;AAMA,IAAIA,gBAAgB,UAASC,MAAT,EAAiB;AACjC,QAAI,CAACC,MAAMC,OAAN,CAAcF,MAAd,CAAL,EAA4B,OAAO,KAAP;AAC5BA,WAAOG,OAAP,CAAe,UAAUC,GAAV,EAAe;AAC1B,YAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,OAAO,KAAP;AAChC,KAFD;AAGA,WAAO,IAAP;AACH,CAND;;AAQA;;;;;AAKA,MAAMC,QAAN,CAAe;AACX;;;;;;AAMAC,gBAAYC,SAAZ,EAAuB;AACnB,aAAKC,KAAL,GAAa,EAAb;AACA,YAAI,OAAOD,SAAP,KAAqB,WAAzB,EAAsC;AACtC,YAAIR,cAAcQ,SAAd,CAAJ,EAA8B;AAC1BA,sBAAUJ,OAAV,CAAkB,KAAKM,SAAvB,EAAkC,IAAlC;AACH,SAFD,MAEO;AACH,kBAAM,IAAIC,SAAJ,CAAc,mBAAd,CAAN;AACH;AACJ;;AAED;;;;;;;;AAQAC,iBAAaC,IAAb,EAAmB;AACf,YAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAAhC,EAAsC;AAClC,mBAAO,KAAKJ,KAAL,CAAWI,IAAX,KAAoB,CAA3B;AACH,SAFD,MAEO;AACH,mBAAO,CAAP;AACH;AACJ;;AAED;;;;;;;AAOAH,cAAUG,IAAV,EAAgB;AACZ,YAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC1B,gBAAIA,IAAJ,EAAU;AACN,oBAAIC,QAAQ,KAAKL,KAAL,CAAWI,IAAX,KAAoB,CAAhC;AACA,qBAAKJ,KAAL,CAAWI,IAAX,IAAmBC,QAAQ,CAA3B;AACH,aAHD,MAGO;AACH,sBAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACH;AACJ,SAPD,MAOO;AACH,kBAAM,IAAIJ,SAAJ,CAAcE,KAAKG,QAAL,KAAkB,wBAAhC,CAAN;AACH;AACJ;;AAED;;;;;;AAMAC,cAAUJ,IAAV,EAAgB;AACZ,YAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC1B,gBAAIA,IAAJ,EAAU;AACN,uBAAO,KAAKJ,KAAL,CAAWI,IAAX,CAAP;AACH,aAFD,MAEO;AACH,sBAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;AACH;AACJ,SAND,MAMO;AACH,kBAAM,IAAIJ,SAAJ,CAAcE,KAAKG,QAAL,KAAkB,wBAAhC,CAAN;AACH;AACJ;AArEU;;kBAwEAV,Q","file":"../WordTank.js","sourcesContent":["/**\r\n * Check to see if the object is an string array\r\n * \r\n * @param {any} strArr Object to check if is a string array\r\n * @returns {boolean} True or false\r\n */\r\nvar __isStringArr = function(strArr) {\r\n    if (!Array.isArray(strArr)) return false;\r\n    strArr.forEach(function (val) {\r\n        if (typeof val !== \"string\") return false;\r\n    })\r\n    return true;\r\n}\r\n\r\n/**\r\n * WordTank class\r\n * \r\n * @class WordTank\r\n */\r\nclass WordTank {\r\n    /**\r\n     * Creates an instance of WordTank.\r\n     * @param {string[]} [wordArray] Array of strings to index\r\n     * \r\n     * @memberOf WordTank\r\n     */\r\n    constructor(wordArray) {\r\n        this.index = {};\r\n        if (typeof wordArray === \"undefined\") return;\r\n        if (__isStringArr(wordArray)) {\r\n            wordArray.forEach(this.indexWord, this);\r\n        } else {\r\n            throw new TypeError(\"Expected string[]\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the amount of times a word has been indexed\r\n     * \r\n     * @param {string} word The word to find\r\n     * @returns {number} The count of how many times a word has been indexed\r\n     * \r\n     * @memberOf WordTank\r\n     */\r\n    getWordCount(word) {\r\n        if (typeof word === \"string\" && word) {\r\n            return this.index[word] || 0;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indexes a word\r\n     * \r\n     * @param {string} word Word to index\r\n     * @returns {void}\r\n     * @memberOf WordTank\r\n     */\r\n    indexWord(word) {\r\n        if (typeof word === \"string\") {\r\n            if (word) {\r\n                var count = this.index[word] || 0;\r\n                this.index[word] = count + 1;\r\n            } else {\r\n                throw new Error(\"Empty string passed in\");\r\n            }\r\n        } else {\r\n            throw new TypeError(word.toString() + \" is not of type string\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the index of the word\r\n     * @param {string} word Word to remove from the index\r\n     * @returns {void}\r\n     * @memberOf WordTank\r\n     */\r\n    clearWord(word) {\r\n        if (typeof word === \"string\") {\r\n            if (word) {\r\n                delete this.index[word];\r\n            } else {\r\n                throw new Error(\"Empty string passed in\");\r\n            }\r\n        } else {\r\n            throw new TypeError(word.toString() + \" is not of type string\");\r\n        }\r\n    }\r\n}\r\n\r\nexport default WordTank;"]}